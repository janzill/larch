.. currentmodule:: larch

=====================================================
7: MTC MNL Mode Choice, Diminishing OVTT by Distance
=====================================================

.. testsetup:: *

	import larch
	import larch.examples
	import pandas
	pandas.set_option('display.max_columns',999)
	pandas.set_option('expand_frame_repr',False)
	pandas.set_option('precision',3)
	larch._doctest_mode_ = True

The primary shortcoming of the specification in Model 6 is that the estimated value of
IVT is unrealistically small. At least two alternatives can be considered for getting
an improved estimate of the value of out-of-vehicle time. One is to assume that the
sensitivity of travelers to OVT diminishes with the trip distance. The idea behind
this is that travelers are more willing to tolerate higher out-of-vehicle time for a
long trip rather than for a short trip.

Model 7 ensures this result by including total travel time (the sum of in-vehicle and
out-of-vehicle time) and out-of-vehicle time divided by distance in place of in- and
out-of-vehicle travel time. (`pp. 114 <http://www.caee.utexas.edu/prof/Bhat/COURSES/LM_Draft_060131Final-060630.pdf>`_)


.. testcode::
	
	d = larch.examples.MTC()
	m = larch.Model(dataservice=d)

.. testcode::
	
	from larch.roles import P, X, PX
	m.utility_co[2] = P("ASC_SR2")  + P("hhinc#2,3") * X("hhinc")
	m.utility_co[3] = P("ASC_SR3P") + P("hhinc#2,3") * X("hhinc")
	m.utility_co[4] = P("ASC_TRAN") + P("hhinc#4") * X("hhinc")
	m.utility_co[5] = P("ASC_BIKE") + P("hhinc#5") * X("hhinc")
	m.utility_co[6] = P("ASC_WALK") + P("hhinc#6") * X("hhinc")

We diminish the effect of ovtt by dividing its parameter by distance.

.. testcode::
	
	m.utility_ca= (
	 	+ PX("totcost")
	 	+ P("motorized_time") * X("(altnum <= 4) * tottime") 
		+ P("nonmotorized_time") * X("(altnum > 4) * tottime")
		+ P("motorized_ovtbydist") * X("(altnum <= 4) * ovtt/dist")  
		)
	
.. testcode::
	
	m.availability_var = '_avail_'
	m.choice_ca_var = '_choice_'
	
.. testcode::
	
	m.ordering = (
		("LOS", ".*cost.*", ".*time.*", ".*dist.*", ),
		("Income", "hhinc.*", ),
		("ASCs", "ASC.*", ),
	)
	
.. doctest::
	:options: +ELLIPSIS, +NORMALIZE_WHITESPACE

	>>> m.load_data()
	>>> m.maximize_loglike()
	â”£ ...Optimization terminated successfully...
	>>> m.calculate_parameter_covariance()
	>>> m.loglike()
	-3547.344...
	
	>>> print(m.pfo()[['value','std err','t stat','robust std err','robust t stat']])
	                               value  std err   t stat  robust std err  robust t stat
	Category Parameter
	LOS      totcost             -0.039  1.048e-02  -3.702       1.263e-02         -3.071
	         motorized_time      -0.015  3.919e-03  -3.733       4.172e-03         -3.506
	         nonmotorized_time   -0.046  5.650e-03  -8.183       5.533e-03         -8.357
	         motorized_ovtbydist -0.112  2.086e-02  -5.374       2.484e-02         -4.513
	Income   hhinc#2,3           -0.004  1.610e-03  -2.428       1.725e-03         -2.267
	         hhinc#4             -0.010  5.211e-03  -1.826       6.151e-03         -1.547
	         hhinc#5             -0.007  3.139e-03  -2.102       3.394e-03         -1.944
	         hhinc#6             -0.742  2.636e-01  -2.815       3.229e-01         -2.297
	ASCs     ASC_BIKE            -0.225  6.524e-02  -3.451       7.172e-02         -3.139
	         ASC_SR2             -0.705  1.506e-01  -4.678       1.600e-01         -4.404
	         ASC_SR3P            -0.772  1.704e-01  -4.531       2.063e-01         -3.742
	         ASC_TRAN             0.478  3.583e-01   1.333       3.652e-01          1.308
	         ASC_WALK             0.192  9.603e-02   2.002       9.592e-02          2.004
